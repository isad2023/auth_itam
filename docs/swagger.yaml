basePath: /
definitions:
  handlers.CreateRequestInput:
    properties:
      certificate:
        type: string
      description:
        type: string
      status:
        type: string
      type:
        type: string
    required:
    - description
    - type
    type: object
  handlers.LoginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - name
    - password
    type: object
  handlers.UpdateRequestStatusRequest:
    properties:
      request_id:
        type: string
      status:
        type: string
    required:
    - request_id
    - status
    type: object
  models.Achievement:
    properties:
      approved:
        example: true
        type: boolean
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      created_by:
        example: 123
        type: integer
      description:
        example: Successfully completed first project
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      image_url:
        example: /uploads/achievement.jpg
        type: string
      points:
        example: 100
        type: number
      title:
        example: First Project
        type: string
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  models.ErrorResponse:
    properties:
      details:
        example: Only JPEG, PNG, GIF, WebP formats are allowed
        type: string
      error:
        example: Invalid file format
        type: string
    type: object
  models.FileInfo:
    properties:
      fileName:
        example: 550e8400-e29b-41d4-a716-446655440000_1234567890.jpg
        type: string
      fileSize:
        example: 12345
        type: integer
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      mimeType:
        example: image/jpeg
        type: string
      originalName:
        example: profile.jpg
        type: string
      url:
        example: /uploads/550e8400-e29b-41d4-a716-446655440000_1234567890.jpg
        type: string
    type: object
  models.FileUploadResponse:
    properties:
      file:
        $ref: '#/definitions/models.FileInfo'
      message:
        example: File uploaded successfully
        type: string
    type: object
  models.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 2592000
        type: integer
      token_type:
        example: Bearer
        type: string
    type: object
  models.Notification:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      isRead:
        type: boolean
      userID:
        type: string
    type: object
  models.RegisterResponse:
    properties:
      message:
        example: User registered successfully
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Specification:
    enum:
    - Frontend
    - Backend
    - Machine Learning
    - Developer
    - Designer
    - Manager
    type: string
    x-enum-varnames:
    - Frontend
    - Backend
    - MachineLearning
    - Developer
    - Designer
    - Manager
  models.SuccessResponse:
    properties:
      message:
        example: File deleted successfully
        type: string
    type: object
  models.User:
    properties:
      about:
        example: Software developer with 5 years of experience
        type: string
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: John Doe
        type: string
      photo_url:
        example: /uploads/profile.jpg
        type: string
      resume_url:
        example: /uploads/resume.pdf
        type: string
      specification:
        allOf:
        - $ref: '#/definitions/models.Specification'
        example: Backend
      telegram:
        example: '@johndoe'
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.UserRole:
    properties:
      id:
        type: string
      roleID:
        type: string
      userID:
        type: string
    type: object
host: 109.73.202.151:8080
info:
  contact: {}
  description: |-
    API для системы аутентификации и управления пользователями ITaM
    Включает функциональность для работы с пользователями, достижениями, запросами, уведомлениями и загрузкой файлов
  title: ITaM Auth API
  version: "1.0"
paths:
  /auth/api/create_achievement:
    post:
      consumes:
      - application/json
      description: Создает новое достижение
      parameters:
      - description: Achievement data
        in: body
        name: achievement
        required: true
        schema:
          $ref: '#/definitions/models.Achievement'
      produces:
      - application/json
      responses:
        "201":
          description: Success message with ID
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid title or points
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to save achievement
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Создать достижение
      tags:
      - Achievements
  /auth/api/create_notification:
    post:
      consumes:
      - application/json
      description: Создает новое уведомление
      parameters:
      - description: Notification data
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/models.Notification'
      produces:
      - application/json
      responses:
        "201":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Создать уведомление
      tags:
      - Notifications
  /auth/api/create_user_request:
    post:
      consumes:
      - application/json
      description: Создает новый запрос от имени пользователя
      parameters:
      - description: Request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateRequestInput'
      produces:
      - application/json
      responses:
        "200":
          description: Success message with request ID
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Создать запрос пользователя
      tags:
      - Requests
  /auth/api/delete_achievement:
    delete:
      description: Удаляет достижение по его ID
      parameters:
      - description: Achievement ID
        in: query
        name: achievement_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid achievement ID
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Удалить достижение
      tags:
      - Achievements
  /auth/api/delete_file/{file_id}:
    delete:
      description: Удаляет загруженный файл (только владелец файла может его удалить)
      parameters:
      - description: File ID (UUID)
        in: path
        name: file_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid file ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Удалить файл
      tags:
      - Files
  /auth/api/delete_notification:
    delete:
      description: Удаляет уведомление по ID
      parameters:
      - description: Notification ID
        in: query
        name: notification_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid notification ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Notification not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Удалить уведомление
      tags:
      - Notifications
  /auth/api/delete_request:
    delete:
      description: Удаляет запрос по его ID
      parameters:
      - description: Request ID
        in: query
        name: request_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Request not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Удалить запрос
      tags:
      - Requests
  /auth/api/get_achievement:
    get:
      description: Возвращает информацию о конкретном достижении
      parameters:
      - description: Achievement ID
        in: query
        name: achievement_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Achievement data
          schema:
            $ref: '#/definitions/models.Achievement'
        "400":
          description: Invalid achievement ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Achievement not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Error while fetching achievement
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Получить достижение
      tags:
      - Achievements
  /auth/api/get_all_achievements:
    get:
      description: Возвращает список всех достижений с пагинацией
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of all achievements
          schema:
            items:
              $ref: '#/definitions/models.Achievement'
            type: array
        "400":
          description: Invalid pagination parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Получить все достижения
      tags:
      - Achievements
  /auth/api/get_all_notifications:
    get:
      description: Возвращает список всех уведомлений или уведомлений пользователя
        с пагинацией
      parameters:
      - description: User ID
        in: query
        name: user_id
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of notifications
          schema:
            items:
              $ref: '#/definitions/models.Notification'
            type: array
        "400":
          description: Invalid user ID or pagination parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Получить все уведомления
      tags:
      - Notifications
  /auth/api/get_all_requests:
    get:
      description: Возвращает список всех запросов текущего пользователя с пагинацией
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: All requests
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID or pagination parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Получить все запросы пользователя
      tags:
      - Requests
  /auth/api/get_notification/{notification_id}:
    get:
      description: Возвращает уведомление по его ID
      parameters:
      - description: Notification ID
        in: path
        name: notification_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Notification data
          schema:
            $ref: '#/definitions/models.Notification'
        "400":
          description: Invalid notification ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Notification not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Получить уведомление по ID
      tags:
      - Notifications
  /auth/api/get_request:
    get:
      description: Возвращает список запросов пользователя с пагинацией
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Request data
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID or pagination parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Получить запросы пользователя
      tags:
      - Requests
  /auth/api/get_user/{user_id}:
    get:
      description: Возвращает данные пользователя по ID
      parameters:
      - description: User ID (UUID)
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получить информацию о пользователе
      tags:
      - User
  /auth/api/get_user_achievements:
    get:
      description: Возвращает список достижений пользователя с пагинацией
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of achievements
          schema:
            items:
              $ref: '#/definitions/models.Achievement'
            type: array
        "400":
          description: Invalid user ID or pagination parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Получить достижения пользователя
      tags:
      - Achievements
  /auth/api/get_user_files:
    get:
      description: Возвращает список всех файлов, загруженных пользователем
      produces:
      - application/json
      responses:
        "200":
          description: List of user files
          schema:
            items:
              $ref: '#/definitions/models.FileInfo'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Получить список файлов пользователя
      tags:
      - Files
  /auth/api/get_user_properties:
    get:
      description: Возвращает список свойств текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: User properties
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Получить свойства пользователя
      tags:
      - User
  /auth/api/get_user_roles:
    get:
      description: Возвращает список ролей текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: User roles
          schema:
            items:
              $ref: '#/definitions/models.UserRole'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Получить роли пользователя
      tags:
      - User
  /auth/api/login:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Авторизация пользователя с использованием логина и пароля
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Логин пользователя
      tags:
      - User
  /auth/api/me:
    get:
      description: Возвращает данные авторизованного пользователя
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Получить информацию о текущем пользователе
      tags:
      - User
  /auth/api/ping:
    get:
      description: Проверяет доступность сервера
      produces:
      - application/json
      responses:
        "200":
          description: Response with pong message
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Пинг-сервис
      tags:
      - Health
  /auth/api/register:
    post:
      consumes:
      - application/json
      description: Регистрация нового пользователя в системе
      parameters:
      - description: User registration details
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success message with user data
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - User
  /auth/api/update_achievement:
    patch:
      consumes:
      - application/json
      description: Обновляет существующее достижение
      parameters:
      - description: Achievement data
        in: body
        name: achievement
        required: true
        schema:
          $ref: '#/definitions/models.Achievement'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid achievement ID or data
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Обновить достижение
      tags:
      - Achievements
  /auth/api/update_notification:
    patch:
      consumes:
      - application/json
      description: Обновляет существующее уведомление
      parameters:
      - description: Notification data
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/models.Notification'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Обновить уведомление
      tags:
      - Notifications
  /auth/api/update_request_status:
    patch:
      consumes:
      - application/json
      description: Обновляет статус указанного запроса
      parameters:
      - description: Request status update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateRequestStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Обновить статус запроса
      tags:
      - Requests
  /auth/api/update_user_info:
    patch:
      consumes:
      - application/json
      description: Обновляет профиль пользователя
      parameters:
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - OAuth2Password: []
      summary: Обновить информацию пользователя
      tags:
      - User
  /auth/api/upload_achievement_image:
    post:
      consumes:
      - multipart/form-data
      description: Загружает изображение для достижения и обновляет поле image_url
      parameters:
      - description: Achievement image file (JPEG, PNG, GIF, WebP, max 10MB)
        in: formData
        name: image
        required: true
        type: file
      - description: Achievement ID (UUID)
        in: formData
        name: achievement_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message with file info
          schema:
            $ref: '#/definitions/models.FileUploadResponse'
        "400":
          description: Invalid file or request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Загрузить изображение достижения
      tags:
      - Files
  /auth/api/upload_profile_image:
    post:
      consumes:
      - multipart/form-data
      description: Загружает изображение профиля для текущего пользователя и обновляет
        поле photo_url
      parameters:
      - description: Profile image file (JPEG, PNG, GIF, WebP, max 10MB)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Success message with file info
          schema:
            $ref: '#/definitions/models.FileUploadResponse'
        "400":
          description: Invalid file or request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Загрузить изображение профиля
      tags:
      - Files
  /auth/api/upload_resume:
    post:
      consumes:
      - multipart/form-data
      description: Загружает резюме для текущего пользователя и обновляет поле resume_url
      parameters:
      - description: Resume file (PDF, DOC, DOCX, max 10MB)
        in: formData
        name: resume
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Success message with file info
          schema:
            $ref: '#/definitions/models.FileUploadResponse'
        "400":
          description: Invalid file or request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - OAuth2Password: []
      summary: Загрузить резюме пользователя
      tags:
      - Files
  /uploads/{filename}:
    get:
      description: Возвращает загруженный файл по имени
      parameters:
      - description: File name (UUID format)
        in: path
        name: filename
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: File content
          schema:
            type: file
        "400":
          description: Invalid filename
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: File not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить файл
      tags:
      - Files
schemes:
- http
- https
securityDefinitions:
  OAuth2Password:
    flow: password
    tokenUrl: /auth/api/login
    type: oauth2
swagger: "2.0"
